var searchIndex = {};
searchIndex['expert_sys'] = {"items":[[0,"","expert_sys","",null,null],[3,"Set","","The `Set` structure is all alphabet axioms.",null,null],[3,"Axiom","","The `Axiom` structure is a primitive.",null,null],[3,"Solver","","The `Solver` structure is all alphabet expression tree.",null,null],[11,"new","","The `new` constructor function returns a default false axiom.",0,{"inputs":[{"name":"axiom"},{"name":"char"}],"output":{"name":"rc"}}],[11,"set_value","","The `set_value` function updates the axiom's value.",0,{"inputs":[{"name":"axiom"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"set_imply","","The `set_imply` function adds/updates the axiom's implication.",0,{"inputs":[{"name":"axiom"},{"name":"rc"}],"output":null}],[11,"get_value","","The `get_value` function returns the result.",0,{"inputs":[{"name":"axiom"}],"output":{"name":"option"}}],[11,"get_ident","","The `get_ident` function returns the arithmetic formule.",0,{"inputs":[{"name":"axiom"}],"output":{"name":"option"}}],[11,"set_imply","","The `set_imply` function changes the Axiom implication.",0,{"inputs":[{"name":"axiom"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"fmt","","The `fmt` function prints the Axiom.",0,{"inputs":[{"name":"axiom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_value","","The `get_value` function returns the axiom's boolean.",1,{"inputs":[{"name":"set"},{"name":"char"}],"output":{"name":"option"}}],[11,"get_ident","","The `get_ident` function returns the axiom's name.",1,{"inputs":[{"name":"set"},{"name":"char"}],"output":{"name":"option"}}],[11,"get_exp","","The `get_exp` function returns the expression.",1,{"inputs":[{"name":"set"},{"name":"char"}],"output":{"name":"option"}}],[11,"set_value","","The `set_value` function updates the axiom's boolean value.",1,{"inputs":[{"name":"set"},{"name":"char"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"set_imply","","The `set_imply` function inserts/updates the dependency axiom.",1,{"inputs":[{"name":"set"},{"name":"char"},{"name":"char"}],"output":{"name":"bool"}}],[11,"default","","The `default` constructor function returns the axiom set.",1,{"inputs":[{"name":"set"}],"output":{"name":"self"}}],[11,"index","","The `index` function returns the axiom from set.",1,{"inputs":[{"name":"set"},{"name":"char"}],"output":{"name":"axiom"}}],[11,"fmt","","The `fmt` function prints all axioms.",1,{"inputs":[{"name":"set"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","The `new` constructor function returns the tree solver.",2,{"inputs":[{"name":"solver"},{"name":"set"}],"output":{"name":"self"}}],[11,"get_branch_value","","The `get_branch_value` function returns the axiom's value.",2,{"inputs":[{"name":"solver"},{"name":"char"}],"output":{"name":"option"}}],[11,"get_branch_exp","","The `get_branch_exp` function returns the last axiom's branch.",2,{"inputs":[{"name":"solver"},{"name":"char"}],"output":{"name":"option"}}],[11,"add_branch_exp","","The `add_branch_exp` function pushs the expression\nto the last targeted branch.",2,{"inputs":[{"name":"solver"},{"name":"rc"},{"name":"string"}],"output":{"name":"bool"}}],[11,"fmt","","The `fmt` function prints all the tree dependencies.",2,{"inputs":[{"name":"solver"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"command","","The `command` module is a User Interface.",null,null],[5,"escutcheon","expert_sys::command","",null,{"inputs":[],"output":null}],[0,"ops","expert_sys","The `ops` module is a collection of operators\nlike: Axiom, And, Or, Xor, Not, [...].",null,null],[3,"And","expert_sys::ops","The `And` structure is a binary And.",null,null],[3,"Not","","The `Not` structure is a binary Not.",null,null],[11,"new","","The `new` constructor function returns And opperation.",3,{"inputs":[{"name":"and"},{"name":"rc"},{"name":"rc"}],"output":{"name":"rc"}}],[11,"get_value","","The `get_value` function returns the result.",3,{"inputs":[{"name":"and"}],"output":{"name":"option"}}],[11,"get_ident","","The `get_ident` function returns the arithmetic formule.",3,{"inputs":[{"name":"and"}],"output":{"name":"option"}}],[11,"set_imply","","The `set_imply` function changes the And implication.",3,{"inputs":[{"name":"and"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"fmt","","The `fmt` function prints the And Door.",3,{"inputs":[{"name":"and"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","The `new` constructor function returns Not opperation.",4,{"inputs":[{"name":"not"},{"name":"rc"}],"output":{"name":"rc"}}],[11,"get_value","","The `get_value` function returns the result.",4,{"inputs":[{"name":"not"}],"output":{"name":"option"}}],[11,"get_ident","","The `get_ident` function returns the arithmetic formule.",4,{"inputs":[{"name":"not"}],"output":{"name":"option"}}],[11,"set_imply","","The `set_imply` function changes the Not implication.",4,{"inputs":[{"name":"not"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"fmt","","The `fmt` function prints the Not.",4,{"inputs":[{"name":"not"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Binary","","",null,null],[10,"new","","",5,{"inputs":[{"name":"binary"},{"name":"rc"},{"name":"rc"}],"output":{"name":"rc"}}],[8,"Unary","","",null,null],[10,"new","","",6,{"inputs":[{"name":"unary"},{"name":"rc"}],"output":{"name":"rc"}}],[8,"Exp","expert_sys","The `Exp` Trait is a expression's implemention.",null,null],[10,"get_ident","","",7,{"inputs":[{"name":"exp"}],"output":{"name":"option"}}],[10,"get_value","","",7,{"inputs":[{"name":"exp"}],"output":{"name":"option"}}],[10,"set_imply","","",7,{"inputs":[{"name":"exp"},{"name":"rc"}],"output":{"name":"bool"}}],[14,"parse_index!","","The `parse_index` macro returns a formated Index or Nothing.",null,null],[14,"format_exp!","","The `format_exp` macro returns the String of all dependencies\nfrom a expression.",null,null],[11,"fmt","","The `fmt` function prints a generic expression.",7,{"inputs":[{"name":"exp"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Axiom"],[3,"Set"],[3,"Solver"],[3,"And"],[3,"Not"],[8,"Binary"],[8,"Unary"],[8,"Exp"]]};
initSearch(searchIndex);
